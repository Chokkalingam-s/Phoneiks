import React, { createContext, useContext, useRef, useState, useEffect } from "react";
import { useNavigate, useLocation } from "react-router-dom";

const VoiceContext = createContext();

export const useVoice = () => useContext(VoiceContext);

const messages = {
  en: {
    combined:
      "Welcome to Phoeniks. For voice Guidance Say 'Enable Voice aid' or click 'Enable button'.",
    enabled:
      "Voice guidance activated. This website is developed for specially abled individuals across India. Apply UDID if not registered yet.",
  },
  hi: {
    combined:
      "‡§´‡•Ä‡§®‡§ø‡§ï‡•ç‡§∏ ‡§Æ‡•á‡§Ç ‡§Ü‡§™‡§ï‡§æ ‡§∏‡•ç‡§µ‡§æ‡§ó‡§§ ‡§π‡•à‡•§ ‡§µ‡•â‡§á‡§∏ ‡§ó‡§æ‡§á‡§° ‡§ï‡•á ‡§≤‡§ø‡§è ‡§ï‡§π‡•á‡§Ç '‡§Ü‡§µ‡§æ‡§ú‡§º ‡§∏‡§ï‡•ç‡§∑‡§Æ ‡§ï‡§∞‡•á‡§Ç' ‡§Ø‡§æ '‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§∞‡•á‡§Ç' ‡§¨‡§ü‡§® ‡§¶‡§¨‡§æ‡§è‡§Ç‡•§",
    enabled:
      "‡§µ‡•â‡§á‡§∏ ‡§ó‡§æ‡§á‡§°‡•á‡§Ç‡§∏ ‡§∏‡§ï‡•ç‡§∞‡§ø‡§Ø ‡§ï‡§∞ ‡§¶‡•Ä ‡§ó‡§à ‡§π‡•à‡•§ ‡§Ø‡§π ‡§µ‡•á‡§¨‡§∏‡§æ‡§á‡§ü ‡§≠‡§æ‡§∞‡§§ ‡§≠‡§∞ ‡§ï‡•á ‡§¶‡§ø‡§µ‡•ç‡§Ø‡§æ‡§Ç‡§ó ‡§µ‡•ç‡§Ø‡§ï‡•ç‡§§‡§ø‡§Ø‡•ã‡§Ç ‡§ï‡•á ‡§≤‡§ø‡§è ‡§µ‡§ø‡§ï‡§∏‡§ø‡§§ ‡§ï‡•Ä ‡§ó‡§à ‡§π‡•à‡•§ ‡§Ø‡§¶‡§ø ‡§Ö‡§≠‡•Ä ‡§§‡§ï ‡§™‡§Ç‡§ú‡•Ä‡§ï‡§∞‡§£ ‡§®‡§π‡•Ä‡§Ç ‡§ï‡§ø‡§Ø‡§æ ‡§π‡•à ‡§§‡•ã ‡§Ø‡•Ç‡§°‡•Ä‡§Ü‡§à‡§°‡•Ä ‡§ï‡•á ‡§≤‡§ø‡§è ‡§Ü‡§µ‡•á‡§¶‡§® ‡§ï‡§∞‡•á‡§Ç‡•§",
  },
};

function speak(msg, lang = "en-IN") {
  return new Promise((resolve) => {
    window.speechSynthesis.cancel();
    
    setTimeout(() => {
      const utter = new window.SpeechSynthesisUtterance(msg);
      utter.lang = lang;
      utter.rate = 0.9;
      utter.pitch = 1.0;
      utter.volume = 1.0;
      
      utter.onstart = () => {
        console.log("üîä Audio STARTED:", msg.substring(0, 40));
      };
      
      utter.onend = () => {
        console.log("üîä Audio ENDED");
        setTimeout(resolve, 200);
      };
      
      utter.onerror = (e) => {
        console.error("üîä Audio ERROR:", e.error);
        resolve();
      };
      
      window.speechSynthesis.speak(utter);
    }, 100);
  });
}

function getLangCode(s) {
  s = s.toLowerCase();
  if (/aawaaz|saksham|‡§Ü‡§µ‡§æ‡§ú‡§º|‡§Ü‡§µ‡§æ‡§ú|hindi/i.test(s)) return "hi";
  return "en";
}

export function VoiceProvider({ children }) {
  const navigate = useNavigate();
  const location = useLocation();

  const [voiceEnabled, setVoiceEnabled] = useState(false);
  const [chosenLang, setChosenLang] = useState("en");

  const voiceEnabledRef = useRef(false);
  const chosenLangRef = useRef("en");
  const recognitionRef = useRef(null);
  const restartTimeoutRef = useRef(null);
  const isSpeakingRef = useRef(false);
  const actionCallbackRef = useRef(null);

  useEffect(() => {
    if (voiceEnabled && !recognitionRef.current) {
      console.log("üéôÔ∏è Starting recognition from context");
      startRecognition();
    }

    return () => {
      if (recognitionRef.current) {
        recognitionRef.current.stop();
        recognitionRef.current = null;
      }
      if (restartTimeoutRef.current) {
        clearTimeout(restartTimeoutRef.current);
      }
      window.speechSynthesis.cancel();
    };
  }, [voiceEnabled]);

  useEffect(() => {
    if (voiceEnabled) {
      console.log("üìç Route changed to:", location.pathname);
    }
  }, [location.pathname, voiceEnabled]);

  function stopRecognitionCompletely() {
    console.log("üõë Stopping recognition");
    
    if (restartTimeoutRef.current) {
      clearTimeout(restartTimeoutRef.current);
      restartTimeoutRef.current = null;
    }
    
    if (recognitionRef.current) {
      try {
        recognitionRef.current.abort();
        recognitionRef.current.stop();
      } catch (e) {
        console.error("Stop error:", e);
      }
      recognitionRef.current = null;
    }
    
    return new Promise(resolve => setTimeout(resolve, 300));
  }

  function startRecognition() {
    if (!("webkitSpeechRecognition" in window || "SpeechRecognition" in window)) {
      console.log("‚ùå Speech recognition not supported");
      return;
    }

    if (recognitionRef.current) {
      console.log("‚ö†Ô∏è Recognition already running");
      return;
    }

    if (isSpeakingRef.current) {
      console.log("‚ö†Ô∏è Currently speaking");
      return;
    }

    const SpeechRecognition =
      window.SpeechRecognition || window.webkitSpeechRecognition;
    const recog = new SpeechRecognition();

    recog.continuous = true;
    recog.interimResults = false;
    recog.maxAlternatives = 3;
    recog.lang = chosenLangRef.current === "hi" ? "hi-IN" : "en-IN";

    recog.onresult = function (event) {
      if (isSpeakingRef.current) {
        console.log("‚è∏Ô∏è Speaking, ignoring input");
        return;
      }

      for (let i = event.resultIndex; i < event.results.length; i++) {
        if (!event.results[i].isFinal) continue;

        const transcript = event.results[i][0].transcript.trim().toLowerCase();
        console.log("üé§ Captured:", transcript);

        // Enable voice aid command
        if (!voiceEnabledRef.current) {
          const enableCmdRegex = /(enable|voice|aid|guidance|aawaaz|‡§Ü‡§µ‡§æ‡§ú‡§º|‡§Ü‡§µ‡§æ‡§ú|saksham|‡§∏‡§ï‡•ç‡§∑‡§Æ|chalu|‡§ö‡§æ‡§≤‡•Ç|karein|‡§ï‡§∞‡•á‡§Ç)/i;

          if (enableCmdRegex.test(transcript)) {
            console.log("üîä Enabling voice aid...");
            enableVoice(getLangCode(transcript));
            return;
          }
        }

        // Check for page-specific action callbacks first
        if (voiceEnabledRef.current && actionCallbackRef.current) {
          const handled = actionCallbackRef.current(transcript);
          if (handled) {
            console.log("‚úÖ Action handled by page callback");
            return;
          }
        }

        // Navigation commands
        if (voiceEnabledRef.current) {
          // Home navigation
          if (/home|‡§π‡•ã‡§Æ|go home|go to home/i.test(transcript)) {
            console.log("üè† HOME command");
            handleNavigation("/home", "home");
            return;
          }

          // Login navigation
          if (/login|‡§≤‡•â‡§ó‡§ø‡§®|log in|go to login/i.test(transcript)) {
            console.log("üîê LOGIN command");
            handleNavigation("/pwd-login", "login");
            return;
          }

          // Apply UDID navigation
          if (/apply|‡§Ø‡•Ç‡§°‡•Ä‡§Ü‡§à‡§°‡•Ä|udid|apply udid|apply for udid/i.test(transcript)) {
            console.log("üìù APPLY command");
            handleNavigation("/apply-for-udid", "apply");
            return;
          }
        }
      }
    };

    recog.onerror = function (e) {
      console.log("‚ùå Recognition error:", e.error);

      if (e.error === "aborted" || e.error === "no-speech") {
        return;
      }

      if (voiceEnabledRef.current && !isSpeakingRef.current) {
        restartTimeoutRef.current = setTimeout(() => {
          if (!recognitionRef.current && !isSpeakingRef.current) {
            startRecognition();
          }
        }, 1000);
      }
    };

    recog.onend = function () {
      console.log("‚èπÔ∏è Recognition ended");
      recognitionRef.current = null;

      if (voiceEnabledRef.current && !isSpeakingRef.current) {
        restartTimeoutRef.current = setTimeout(() => {
          if (!recognitionRef.current && !isSpeakingRef.current) {
            startRecognition();
          }
        }, 500);
      }
    };

    try {
      recog.start();
      recognitionRef.current = recog;
      console.log("‚ñ∂Ô∏è Recognition started");
    } catch (err) {
      console.log("‚ùå Start error:", err);
    }
  }

  async function handleNavigation(path, pageName) {
    console.log(`\nüöÄ Navigation to ${pageName.toUpperCase()}`);
    
    // STOP recognition first
    isSpeakingRef.current = true;
    await stopRecognitionCompletely();
    
    // Build message
    const navMessages = {
      home: { en: "Navigating to home page", hi: "‡§π‡•ã‡§Æ ‡§™‡•á‡§ú ‡§™‡§∞ ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç" },
      login: { en: "Navigating to login page", hi: "‡§≤‡•â‡§ó‡§ø‡§® ‡§™‡•á‡§ú ‡§™‡§∞ ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç" },
      apply: { en: "Navigating to apply page", hi: "‡§Ö‡§™‡•ç‡§≤‡§æ‡§à ‡§™‡•á‡§ú ‡§™‡§∞ ‡§ú‡§æ ‡§∞‡§π‡•á ‡§π‡•à‡§Ç" }
    };
    
    const msg = navMessages[pageName][chosenLangRef.current];
    const lang = chosenLangRef.current === "hi" ? "hi-IN" : "en-IN";
    
    console.log(`üîä Speaking: "${msg}"`);
    
    // Speak and wait for it to finish
    await speak(msg, lang);
    
    console.log("‚úÖ Speech done");
    
    // Wait a bit more before navigation
    await new Promise(resolve => setTimeout(resolve, 300));
    
    // Now navigate
    console.log(`üîÄ Navigating to ${path}`);
    navigate(path);
    
    isSpeakingRef.current = false;
    
    // Restart recognition after navigation
    setTimeout(() => {
      if (voiceEnabledRef.current && !isSpeakingRef.current) {
        console.log("‚ñ∂Ô∏è Resuming recognition");
        startRecognition();
      }
    }, 1000);
  }

  async function enableVoice(lang = "en") {
    if (voiceEnabledRef.current) return;

    console.log("‚úÖ ENABLING VOICE:", lang);

    // Stop recognition
    isSpeakingRef.current = true;
    await stopRecognitionCompletely();

    setVoiceEnabled(true);
    voiceEnabledRef.current = true;

    setChosenLang(lang);
    chosenLangRef.current = lang;

    console.log("üîä Speaking enabled message");
    
    // Speak enabled message
    await speak(messages[lang].enabled, lang + "-IN");
    
    console.log("‚úÖ Enable speech complete");
    isSpeakingRef.current = false;

    // Start recognition
    setTimeout(() => {
      if (voiceEnabledRef.current && !isSpeakingRef.current) {
        console.log("‚ñ∂Ô∏è Starting recognition");
        startRecognition();
      }
    }, 1000);
  }

  function disableVoice() {
    console.log("üîá Disabling voice");

    setVoiceEnabled(false);
    voiceEnabledRef.current = false;

    stopRecognitionCompletely();
    window.speechSynthesis.cancel();
  }

  async function speakText(msg) {
    isSpeakingRef.current = true;
    await stopRecognitionCompletely();
    await speak(msg, chosenLangRef.current === "hi" ? "hi-IN" : "en-IN");
    isSpeakingRef.current = false;
    
    setTimeout(() => {
      if (voiceEnabledRef.current && !isSpeakingRef.current) {
        startRecognition();
      }
    }, 1000);
  }

  function registerActionCallback(callback) {
    actionCallbackRef.current = callback;
    console.log("‚úÖ Action callback registered");
  }

  function unregisterActionCallback() {
    actionCallbackRef.current = null;
    console.log("‚ùå Action callback unregistered");
  }

  const value = {
    voiceEnabled,
    chosenLang,
    enableVoice,
    disableVoice,
    speak: speakText,
    registerActionCallback,
    unregisterActionCallback,
  };

  return <VoiceContext.Provider value={value}>{children}</VoiceContext.Provider>;
}
